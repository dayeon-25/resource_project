<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>My page</title>
	<link rel="stylesheet" href="/css/mypage.css">
    <link rel="stylesheet" href="/css/common.css">

</head>
<body class="mypage">
{{> layout/header}}

<!--사용자 정보 -->
<div class="container">
    <div class="user-section">
		<h1 class="greeting" id="greeting">로딩 중</h1>

	<div class="user-info-wrapper">
        <div class="user-info-grid" id="userInfoGrid">
            <!--        더미        -->
        </div>

            <button class="account-settings-btn" onclick="openAccountSettings()">
                계정 설정
            </button>
        </div>
	</div>


    <!--분석 이력 카드 !수정 필요 ! -->
	<div class="analysis-section">
		<div class="cards-wrapper">
			<div class="cards-container" id="cardsContainer">
				<!-- JS -->
			</div>
		</div>
	</div>
</div>

<script>
//더미 데이터

    const MOCK_USER_DATA = {
        name: "세라",
        totalAnalysisCount: 4,
        lastAnalyzedDate: "2025.10.04",
        joinDate: "2024.01.01"
    };

    const MOCK_ANALYSIS_HISTORY = [
            {
                id: 1,
                thumbnailUrl: null,
                impurityRate: 3.3,
                isSuitable: false,
                analyzedDate: "2025.10.04",
                analyzedTime: "13:00"
            },
            {
                id: 2,
                thumbnailUrl: null,
                impurityRate: 2.1,
                isSuitable: true,
                analyzedDate: "2025.10.03",
                analyzedTime: "15:30"
            },
            {
                id: 3,
                thumbnailUrl: null,
                impurityRate: 4.7,
                isSuitable: false,
                analyzedDate: "2025.10.02",
                analyzedTime: "09:15"
            },
            {
                id: 4,
                thumbnailUrl: null,
                impurityRate: 1.8,
                isSuitable: true,
                analyzedDate: "2025.10.01",
                analyzedTime: "10:45"
            }
    ];

const USE_MOCK_DATA = true;

document.addEventListener('DOMContentLoaded', async () => {
	console.log('페이지 로드 완료');

	console.log(`데이터 모드: ${USE_MOCK_DATA ? 'MOCK DATA' : 'REAL API'}`);

	await Promise.all([
		loadUserInfo(),
		loadAnalysisHistory()
	]);
});

function delay(ms) {
	return new Promise(resolve => setTimeout(resolve, ms));
}

// 사용자 정보 가져오기
async function loadUserInfo() {
	try {
		let userData;

		if (USE_MOCK_DATA) {
			console.log('더미 데이터 로드중');
			await delay(300);
			userData = MOCK_USER_DATA;
		} else {
			console.log('API 호출: /api/member/me');
			const response = await fetch('/api/member/me', {
				credentials: 'include'
			});

			if (!response.ok) {
				throw new Error('사용자 정보를 불러올 수 없습니다.');
			}

			userData = await response.json();
		}

		console.log('사용자 데이터:', userData);
		displayUserInfo(userData);

	} catch (error) {
        console.error('사용자 정보 로딩 실패:', error);
        const greetingEl = document.getElementById('greeting');
        if (greetingEl) {
            greetingEl.textContent = '사용자 정보를 불러올 수 없습니다.';
        }
    }
}


// 분석 이력 가져오기
async function loadAnalysisHistory() {
	try {
		let analysisData;

		if (USE_MOCK_DATA) {
			console.log('더미 데이터 분석 이력 로드중');
			await delay(500);

			analysisData = MOCK_ANALYSIS_HISTORY;
		} else {
			console.log('API 호출: /api/member/analysis-history');
			const response = await fetch('/api/member/analysis-history', {
				credentials: 'include'
			});

			if (!response.ok) {
				throw new Error('분석 이력을 불러올 수 없습니다.');
			}
			const pageData = await response.json();
			analysisData = pageData.content;
		}

		console.log('분석 이력:', analysisData);
		displayAnalysisCards(analysisData);

	} catch (error) {
        console.error('분석 이력 로딩 실패:', error);
        const container = document.getElementById('cardsContainer');
        if (container) {
            container.innerHTML = `
                <div class="empty-state">
                    <p>분석 이력을 불러올 수 없습니다.</p>
                </div>
            `;
        }
    }
}

// 사용자 정보 화면에 나타내기
function displayUserInfo(userData) {
    const greetingEl = document.getElementById('greeting');
    if (greetingEl) {
        greetingEl.textContent = `${userData.name}님, 안녕하세요`;
    }

    const userInfoGrid = document.getElementById('userInfoGrid');
    if (userInfoGrid) {
        userInfoGrid.innerHTML = `
            <div class="info-item">
                <div class="info-label">총 분석 이력</div>
                <div class="info-value bold">${userData.totalAnalysisCount}건</div>
            </div>
            <div class="info-item">
                <div class="info-label">최근 분석일</div>
                <div class="info-value medium">${userData.lastAnalyzedDate || '-'}</div>
            </div>
            <div class="info-item">
                <div class="info-label">가입일</div>
                <div class="info-value medium">${formatDate(userData.joinDate)}</div>
            </div>
        `;
    }
}

// 분석 이력 카드 나타내기
function displayAnalysisCards(analyses) {
    const container = document.getElementById('cardsContainer');

    if (!container) {
        console.error('cardsContainer 요소를 찾을 수 없습니다.');
        return;
    }

    if (!analyses || analyses.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <p>아직 분석 이력이 없습니다.</p>
            </div>
        `;
        return;
    }

    container.innerHTML = analyses.map(analysis => `
        <div class="analysis-card" onclick="showDetail(${analysis.id})">
            ${analysis.thumbnailUrl ?
                `<img src="${analysis.thumbnailUrl}" alt="분석 이미지" class="card-image">` :
                ''
            }

            <div class="card-badge ${analysis.isSuitable ? 'badge-suitable' : 'badge-unsuitable'}">
                ${analysis.isSuitable ? '적합' : '부적합'}
            </div>

            <div class="card-content">
                <div class="card-datetime">
                    <span>${analysis.analyzedDate}</span>
                    <span>${analysis.analyzedTime}</span>
                </div>
                <div class="card-bottom">
                    <div class="card-info">
                        <h3>불순물 비율</h3>
                        <div class="card-rate">${analysis.impurityRate}%</div>
                    </div>
                    <a href="/analysis/${analysis.id}" class="card-detail-btn" onclick="event.stopPropagation();">
                        상세 분석 보기 &gt;
                    </a>
                </div>
            </div>
        </div>
    `).join('');
}

// 날짜
function formatDate(dateString) {
    if (!dateString) return '-';
    const date = new Date(dateString);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `'${year}.${month}.${day}'`;
}

// 카드 스크롤하기
function scrollCards(direction) {
    const container = document.getElementById('cardsContainer');
    if (container) {
        const scrollAmount = 600;
        container.scrollBy({
            left: direction * scrollAmount,
            behavior: 'smooth'
        });
    }
}

// 상세 분석 보기 버튼
function showDetail(id) {
    console.log('상세보기:', id);
    window.location.href = `/analysis/${id}`;
}

// 계정 설정
function openAccountSettings() {
    console.log('계정 설정 열기');
    window.location.href = '/account-settings';
}
</script>

</body>
</html>

