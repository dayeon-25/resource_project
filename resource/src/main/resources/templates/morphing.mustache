<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HSV Color Masking & Morphing</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f5f5;
            padding: 20px;
            overflow: hidden;
            height: 100vh;
        }

        .container {
            max-width: 1280px;
            margin: 0 auto;
            max-height: 100vh;
            overflow: hidden;
        }

        h1 {
            text-align: center;
            font-size: 2rem;
            margin-bottom: 10px;
            color: #1a1a1a;
        }

        .subtitle {
            text-align: center;
            color: #666;
            margin-bottom: 20px;
            font-size: 1.1rem;
        }

        .card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }

        .hsv-controls {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin-bottom: 20px;
        }

        .control-group {
            display: flex;
            flex-direction: column;
        }

        .control-group label {
            font-size: 0.95rem;
            font-weight: 600;
            margin-bottom: 12px;
            color: #333;
        }

        .control-group input[type="number"] {
            padding: 10px;
            border: 2px solid #e0e0e0;
            border-radius: 6px;
            font-size: 1rem;
            margin-bottom: 10px;
            transition: border-color 0.3s;
        }

        .control-group input[type="number"]:focus {
            outline: none;
            border-color: #4CAF50;
        }

        .color-slider {
            width: 100%;
            height: 40px;
            border-radius: 20px;
            -webkit-appearance: none;
            appearance: none;
            outline: none;
            cursor: pointer;
        }

        .color-slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: white;
            border: 3px solid #333;
            cursor: pointer;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .color-slider::-moz-range-thumb {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: white;
            border: 3px solid #333;
            cursor: pointer;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        #hueSlider {
            background: linear-gradient(to right,
                #ff0000, #ffff00, #00ff00, #00ffff,
                #0000ff, #ff00ff, #ff0000);
        }

        #satSlider {
            background: linear-gradient(to right, #e0e0e0, #4CAF50);
        }

        #valSlider {
            background: linear-gradient(to right, #2a2a2a, #d4d4d4);
        }

        .generate-btn {
            width: 100%;
            padding: 16px;
            background: #1a1a1a;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.3s;
        }

        .generate-btn:hover {
            background: #333;
        }

        .generate-btn:active {
            transform: translateY(1px);
        }

        .generate-btn:disabled {
            background: #999;
            cursor: not-allowed;
        }

        .morph-section {
            margin-top: 10px;
        }

        .morph-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .morph-header h3 {
            font-size: 1.2rem;
            color: #333;
        }

        .morph-indicator {
            color: #666;
            font-size: 0.95rem;
        }

        .morph-subtitle {
            text-align: center;
            color: #666;
            font-size: 0.95rem;
            margin-top: -10px;
            margin-bottom: 15px;
        }

        .morph-slider-container {
            margin-bottom: 20px;
        }

        .morph-slider {
            width: 100%;
            height: 8px;
            border-radius: 4px;
            -webkit-appearance: none;
            appearance: none;
            background: #e0e0e0;
            outline: none;
            cursor: pointer;
        }

        .morph-slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: #333;
            cursor: pointer;
            box-shadow: 0 2px 6px rgba(0,0,0,0.3);
        }

        .morph-slider::-moz-range-thumb {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: #333;
            cursor: pointer;
            box-shadow: 0 2px 6px rgba(0,0,0,0.3);
        }

        .preview-container {
            display: flex;
            justify-content: center;
            align-items: center;
            height:350px;
            background: #f9f9f9;
            border-radius: 8px;
            position: relative;
        }

        .preview-image {
            width:100%;
            height:100%;
            object-fit: contain;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

        .placeholder {
            color: #999;
            font-size: 1.2rem;
            text-align: center;
        }

        .loading {
            color: #666;
            font-size: 1.1rem;
            text-align: center;
        }

        @media (max-width: 768px) {
            body {
                height: auto;
                min-height: 100vh;
                overflow-y: auto;
            }
            .hsv-controls {
                grid-template-columns: 1fr;
            }

            h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
<input type="hidden" id="_csrf" name="_csrf" value="{{_csrf.token}}"/>
<div class="container">
    <button id="backButton" style="
        position: absolute;
        top: 20px;
        left: 20px;
        padding: 8px 16px;
        border: none;
        border-radius: 6px;
        background: #1a1a1a;
        color: white;
        font-size: 0.95rem;
        cursor: pointer;
        z-index: 1000;
    ">← 뒤로가기</button>

    <h1>HSV 색상 검출 및 모핑</h1>
    <p class="subtitle">HSV 임계값을 설정하여 마스킹된 이미지를 생성하고 변화 과정을 확인하세요.</p>

    <div class="card">
        <div class="hsv-controls">
            <div class="control-group">
                <label>색상 (0-179)</label>
                <input type="number" id="hueInput" min="0" max="179" value="90">
                <input type="range" id="hueSlider" class="color-slider" min="0" max="179" value="90">
            </div>
            <div class="control-group">
                <label>채도 (0-255)</label>
                <input type="number" id="satInput" min="0" max="255" value="127">
                <input type="range" id="satSlider" class="color-slider" min="0" max="255" value="127">
            </div>
            <div class="control-group">
                <label>명도 (0-255)</label>
                <input type="number" id="valInput" min="0" max="255" value="127">
                <input type="range" id="valSlider" class="color-slider" min="0" max="255" value="127">
            </div>
        </div>

        <button class="generate-btn" id="generateBtn" onclick="generateMaskedImages()">색상 검출 시작</button>
    </div>

    <div class="card morph-section" id="morphSection" style="display: none;">
        <div class="morph-header">
            <h3>모핑 제어</h3>
            <span class="morph-indicator" id="morphIndicator">이미지 0 / 6</span>
        </div>

        <p class="morph-subtitle">슬라이더를 움직여 변화 과정을 확인해보세요.</p>

        <div class="morph-slider-container">
            <input type="range" id="morphSlider" class="morph-slider" min="0" max="100" value="0">
        </div>

        <div class="preview-container" id="previewContainer">
            <div class="placeholder"></div>
        </div>
    </div>
</div>

<script>
    const hueInput = document.getElementById('hueInput');
    const satInput = document.getElementById('satInput');
    const valInput = document.getElementById('valInput');
    const hueSlider = document.getElementById('hueSlider');
    const satSlider = document.getElementById('satSlider');
    const valSlider = document.getElementById('valSlider');
    const morphSection = document.getElementById('morphSection');
    const morphSlider = document.getElementById('morphSlider');
    const morphIndicator = document.getElementById('morphIndicator');
    const previewContainer = document.getElementById('previewContainer');
    const generateBtn = document.getElementById('generateBtn');

    // 서버에서 받을 이미지들을 저장할 배열
    let morphImages = [];
    let targetH = 0;
    let targetS = 0;
    let targetV = 0;

    function syncInput(slider, input) {
        input.value = slider.value;
    }

    function syncSlider(input, slider) {
        const min = parseInt(slider.min);
        const max = parseInt(slider.max);
        let val = parseInt(input.value);
        if (val < min) val = min;
        if (val > max) val = max;
        input.value = val;
        slider.value = val;
    }

    hueSlider.addEventListener('input', () => syncInput(hueSlider, hueInput));
    satSlider.addEventListener('input', () => syncInput(satSlider, satInput));
    valSlider.addEventListener('input', () => syncInput(valSlider, valInput));

    hueInput.addEventListener('input', () => syncSlider(hueInput, hueSlider));
    satInput.addEventListener('input', () => syncSlider(satInput, satSlider));
    valInput.addEventListener('input', () => syncSlider(valInput, valSlider));

    async function generateMaskedImages() {
        targetH = parseInt(hueInput.value);
        targetS = parseInt(satInput.value);
        targetV = parseInt(valInput.value);

        // 버튼 비활성화 및 로딩 표시
        generateBtn.disabled = true;
        generateBtn.textContent = '처리 중...';

         try {
            const csrfToken = document.getElementById('_csrf').value;
            const csrfHeader = 'X-CSRF-TOKEN';

            const pathParts = window.location.pathname.split('/');
            const origImageId = pathParts[2];

            const response = await fetch(`/morphing/${origImageId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    [csrfHeader]: csrfToken
                },
                body: JSON.stringify({ h: targetH, s: targetS, v: targetV })
            });

            const result = await response.json();

            console.log(targetH, targetS, targetV);

            if (result.status === 0 && result.data) {
                const keys = Object.keys(result.data).sort();
                morphImages = keys.map(key => result.data[key]);

                const originIndex = keys.indexOf('origin_img');
                if (originIndex > 0) {
                    const originImage = morphImages.splice(originIndex, 1)[0];
                    morphImages.unshift(originImage);
                }

                morphSection.style.display = 'block';
                morphSlider.value = 0;
                updateMorphPreview();
            } else {
                throw new Error(result.error || '이미지 생성 실패');
            }

        } catch (error) {
            console.error('Error:', error);
            alert('이미지 생성 중 오류가 발생했습니다: ' + error.message);
        } finally {
            generateBtn.disabled = false;
            generateBtn.textContent = '색상 검출 시작';
        }
    }

    morphSlider.addEventListener('input', updateMorphPreview);

    function updateMorphPreview() {
        if (morphImages.length === 0) return;

        const progress = parseInt(morphSlider.value);
        const maxIndex = morphImages.length - 1;

        const exactIndex = (progress / 100) * maxIndex;
        const lowerIndex = Math.floor(exactIndex);
        const upperIndex = Math.ceil(exactIndex);
        const blendRatio = exactIndex - lowerIndex;

        morphIndicator.textContent = `이미지 ${exactIndex.toFixed(1)} / ${maxIndex}`;

        // 기존 이미지들 찾기
        let imgLower = previewContainer.querySelector('.img-lower');
        let imgUpper = previewContainer.querySelector('.img-upper');

        // 없으면 새로 생성
        if (!imgLower) {
            imgLower = document.createElement('img');
            imgLower.className = 'preview-image img-lower';
            imgLower.style.position = 'absolute';
            imgLower.alt = 'Masked Preview';
            previewContainer.appendChild(imgLower);
        }

        if (!imgUpper) {
            imgUpper = document.createElement('img');
            imgUpper.className = 'preview-image img-upper';
            imgUpper.style.position = 'absolute';
            imgUpper.alt = 'Masked Preview';
            previewContainer.appendChild(imgUpper);
        }

        // 이미지 소스 업데이트
        imgLower.src = morphImages[lowerIndex];

        if (upperIndex !== lowerIndex) {
            imgUpper.src = morphImages[upperIndex];
            imgUpper.style.opacity = blendRatio;
            imgUpper.style.display = 'block';
        } else {
            imgUpper.style.display = 'none';
        }
    }

    const backButton = document.getElementById('backButton');
    backButton.addEventListener('click', () => {
        const pathParts = window.location.pathname.split('/');
        const origImageId = pathParts[2]; // /result/{id}/morphing
        window.location.href = `/result/${origImageId}`;
    });
</script>
</body>
</html>