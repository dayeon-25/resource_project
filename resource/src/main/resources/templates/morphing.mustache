<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HSV Color Masking & Morphing</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f5f5;
            padding: 20px;
            overflow: hidden;
            height: 100vh;
        }

        .container {
            max-width: 1280px;
            margin: 0 auto;
            max-height: 100vh;
            overflow: hidden;
        }

        h1 {
            text-align: center;
            font-size: 2rem;
            margin-bottom: 10px;
            color: #1a1a1a;
        }

        .subtitle {
            text-align: center;
            color: #666;
            margin-bottom: 20px;
            font-size: 1.1rem;
        }

        .card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }

        .hsv-controls {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin-bottom: 20px;
        }

        .control-group {
            display: flex;
            flex-direction: column;
        }

        .control-group label {
            font-size: 0.95rem;
            font-weight: 600;
            margin-bottom: 12px;
            color: #333;
        }

        .control-group input[type="number"] {
            padding: 10px;
            border: 2px solid #e0e0e0;
            border-radius: 6px;
            font-size: 1rem;
            margin-bottom: 10px;
            transition: border-color 0.3s;
        }

        .control-group input[type="number"]:focus {
            outline: none;
            border-color: #4CAF50;
        }

        .color-slider {
            width: 100%;
            height: 40px;
            border-radius: 20px;
            -webkit-appearance: none;
            appearance: none;
            outline: none;
            cursor: pointer;
        }

        .color-slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: white;
            border: 3px solid #333;
            cursor: pointer;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .color-slider::-moz-range-thumb {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: white;
            border: 3px solid #333;
            cursor: pointer;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        #hueSlider {
            background: linear-gradient(to right,
                #ff0000, #ffff00, #00ff00, #00ffff,
                #0000ff, #ff00ff, #ff0000);
        }

        #satSlider {
            background: linear-gradient(to right, #e0e0e0, #4CAF50);
        }

        #valSlider {
            background: linear-gradient(to right, #2a2a2a, #d4d4d4);
        }

        .generate-btn {
            width: 100%;
            padding: 16px;
            background: #1a1a1a;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.3s;
        }

        .generate-btn:hover {
            background: #333;
        }

        .generate-btn:active {
            transform: translateY(1px);
        }

        .morph-section {
            margin-top: 10px;
        }

        .morph-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .morph-header h3 {
            font-size: 1.2rem;
            color: #333;
        }

        .morph-indicator {
            color: #666;
            font-size: 0.95rem;
        }

        .morph-subtitle {
            text-align: center;
            color: #666;
            font-size: 0.95rem;
            margin-top: -10px;
            margin-bottom: 15px;
        }


        .morph-slider-container {
            margin-bottom: 30px;
        }

        .morph-slider {
            width: 100%;
            height: 8px;
            border-radius: 4px;
            -webkit-appearance: none;
            appearance: none;
            background: #e0e0e0;
            outline: none;
            cursor: pointer;
        }

        .morph-slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: #333;
            cursor: pointer;
            box-shadow: 0 2px 6px rgba(0,0,0,0.3);
        }

        .morph-slider::-moz-range-thumb {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: #333;
            cursor: pointer;
            box-shadow: 0 2px 6px rgba(0,0,0,0.3);
        }

        .preview-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 300px;
            background: #f9f9f9;
            border-radius: 8px;
            position: relative;
        }

        .preview-image {
            max-width: 100%;
            max-height: 350px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

        .hsv-display {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0,0,0,0.75);
            color: white;
            padding: 12px 18px;
            border-radius: 6px;
            font-family: 'Courier New', monospace;
            font-size: 1rem;
            font-weight: 600;
        }

        .placeholder {
            color: #999;
            font-size: 1.2rem;
            text-align: center;
        }

        @media (max-width: 768px) {
            body {
                height: auto;
                min-height: 100vh;
                overflow-y: auto;
            }
            .hsv-controls {
                grid-template-columns: 1fr;
            }

            h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
<div class="container">
    <button id="backButton" style="
    position: absolute;
    top: 20px;
    left: 20px;
    padding: 8px 16px;
    border: none;
    border-radius: 6px;
    background: #1a1a1a;
    color: white;
    font-size: 0.95rem;
    cursor: pointer;
    z-index: 1000;
">← 뒤로가기</button>


    <h1>HSV 색상 검출 및 모핑</h1>
    <p class="subtitle">HSV 임계값을 설정하여 마스킹된 이미지를 생성하고 변화 과정을 확인하세요.</p>

    <div class="card">
        <div class="hsv-controls">
            <div class="control-group">
                <label>색상 (0-179)</label>
                <input type="number" id="hueInput" min="0" max="179" value="90">
                <input type="range" id="hueSlider" class="color-slider" min="0" max="179" value="90">
            </div>
            <div class="control-group">
                <label>채도 (0-255)</label>
                <input type="number" id="satInput" min="0" max="255" value="127">
                <input type="range" id="satSlider" class="color-slider" min="0" max="255" value="127">
            </div>
            <div class="control-group">
                <label>명도 (0-255)</label>
                <input type="number" id="valInput" min="0" max="255" value="76">
                <input type="range" id="valSlider" class="color-slider" min="0" max="255" value="76">
            </div>
        </div>

        <button class="generate-btn" onclick="generateMaskedImages()">색상 검출 시작</button>
    </div>

    <div class="card morph-section" id="morphSection" style="display: none;">
        <div class="morph-header">
            <h3>모핑 제어</h3>
            <span class="morph-indicator" id="morphIndicator">Image 0 → 6</span>
        </div>

        <p class="morph-subtitle">슬라이더를 움직여 변화 과정을 확인해보세요.</p>

        <div class="morph-slider-container">
            <input type="range" id="morphSlider" class="morph-slider" min="0" max="100" value="0">
        </div>

        <div class="preview-container" id="previewContainer">
            <div class="hsv-display" id="hsvDisplay">H:0 S:0 V:0</div>
            <div class="placeholder">결과 이미지가 여기에 표시됩니다</div>
        </div>
    </div>
</div>

<script>
    const hueInput = document.getElementById('hueInput');
    const satInput = document.getElementById('satInput');
    const valInput = document.getElementById('valInput');
    const hueSlider = document.getElementById('hueSlider');
    const satSlider = document.getElementById('satSlider');
    const valSlider = document.getElementById('valSlider');
    const morphSection = document.getElementById('morphSection');
    const morphSlider = document.getElementById('morphSlider');
    const morphIndicator = document.getElementById('morphIndicator');
    const hsvDisplay = document.getElementById('hsvDisplay');
    const previewContainer = document.getElementById('previewContainer');

    let targetH = 90;
    let targetS = 127;
    let targetV = 76;
    let morphSteps = 6;

    function syncInput(slider, input) {
        input.value = slider.value;
    }

    function syncSlider(input, slider) {
        const min = parseInt(slider.min);
        const max = parseInt(slider.max);
        let val = parseInt(input.value);
        if (val < min) val = min;
        if (val > max) val = max;
        input.value = val;
        slider.value = val;
    }

    hueSlider.addEventListener('input', () => syncInput(hueSlider, hueInput));
    satSlider.addEventListener('input', () => syncInput(satSlider, satInput));
    valSlider.addEventListener('input', () => syncInput(valSlider, valInput));

    hueInput.addEventListener('input', () => syncSlider(hueInput, hueSlider));
    satInput.addEventListener('input', () => syncSlider(satInput, satSlider));
    valInput.addEventListener('input', () => syncSlider(valInput, valSlider));

    function generateMaskedImages() {
        targetH = parseInt(hueInput.value);
        targetS = parseInt(satInput.value);
        targetV = parseInt(valInput.value);

        morphSection.style.display = 'block';
        morphSlider.value = 0;
        updateMorphPreview();

        morphSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }

    morphSlider.addEventListener('input', updateMorphPreview);

    function updateMorphPreview() {
        const progress = parseInt(morphSlider.value);
        const step = Math.floor(progress / (100 / morphSteps));

        morphIndicator.textContent = `Image ${step} → ${morphSteps}`;

        const ratio = progress / 100;
        const currentH = Math.round(targetH * ratio);
        const currentS = Math.round(targetS * ratio);
        const currentV = Math.round(targetV * ratio);

        hsvDisplay.textContent = `H:${currentH} S:${currentS} V:${currentV}`;

        const canvas = document.createElement('canvas');
        canvas.width = 400;
        canvas.height = 400;
        const ctx = canvas.getContext('2d');

        const intensity = progress / 100;
        const bgColor = 128 - (128 * intensity);
        const fgColor = 255 * intensity;

        ctx.fillStyle = `rgb(${bgColor}, ${bgColor}, ${bgColor})`;
        ctx.fillRect(0, 0, 400, 400);

        const numShapes = Math.floor(10 * intensity);
        for (let i = 0; i < numShapes; i++) {
            ctx.fillStyle = `rgb(${fgColor}, ${fgColor}, ${fgColor})`;
            const x = Math.random() * 400;
            const y = Math.random() * 400;
            const size = 20 + Math.random() * 40;
            ctx.fillRect(x, y, size, size);
        }

        previewContainer.innerHTML = '';
        const img = new Image();
        img.src = canvas.toDataURL();
        img.className = 'preview-image';
        img.alt = 'Masked Preview';

        const hsvDisplayNew = document.createElement('div');
        hsvDisplayNew.className = 'hsv-display';
        hsvDisplayNew.id = 'hsvDisplay';
        hsvDisplayNew.textContent = `H:${currentH} S:${currentS} V:${currentV}`;

        previewContainer.appendChild(hsvDisplayNew);
        previewContainer.appendChild(img);
    }

    const backButton = document.getElementById('backButton');

    backButton.addEventListener('click', () => {
    const pathParts = window.location.pathname.split('/');
    const origImageId = pathParts[2]; // /result/{id}/morphing
    window.location.href = `/result/${origImageId}`;
    });





</script>
</body>
</html>