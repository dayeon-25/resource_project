<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <link rel="stylesheet" href="/css/common.css">
    <link rel="stylesheet" href="/css/analyze.css">
</head>


<body class="analyze">
<input type="hidden" name="_csrf" value="{{_csrf.token}}">
{{>layout/header}}
<div class="container">
    <div class="title-container">
        <p class="title">순환 골재 품질 분석</p>
        <p class="notice">R-CNN,PCA,OpenCV를 활용하여 순환골재 내 불순물을 검출하고,
            품질 기준에 적합한지 여부를 판정합니다 <img src="/images/notice_icon.png" alt="알림" id="notice_icon" style="cursor:pointer;"></p>


        <div id="popup" class="popup">
            <div class="popup-content">
                <span id="close">&times;</span>
                <p>품질 기준 및 규정</p>
                <p class="popup-explain">순환 골재의 유기 이물질 함유량은 골재속에 포함된 비닐,플라스틱,목재 등의 함유량이
                    총 골재 용적의 1.0% 이하이어야 한다.<br>기준:KS F 2576(순환 골재의 이물질 함유량 시험방법)</p>
            </div>
        </div>
    </div>
    <div class="sample-container">
        <p class="sample-container-title">샘플 이미지 예시</p>
        <div class="sample-img-container">
            <div class="sample-img-box">
                <img class="sample-img" src="/images/good_sample.png" alt="좋은 예시1">
                <div class="sample-label good">좋은 예시</div>
            </div>
            <div class="sample-img-box">
                <img class="sample-img" src="/images/good_sample2.png" alt="좋은 예시2">
                <div class="sample-label good">좋은 예시</div>
            </div>
            <div class="sample-img-box">
                <img class="sample-img" src="/images/bad_sample.png" alt="나쁜 예시">
                <div class="sample-label bad">나쁜 예시</div>
            </div>
        </div>
    </div>
    <div class="upload-container">
        <div class="before-upload-container" id="before-upload-container">
            <h2>이미지를 찾아서 업로드 하세요</h2>
            <p>파일은 JPEG, JPG, PNG 또는 WebP 형식이어야 하며 최대 용량은 10MB입니다</p>
            <input type="file" id="file-input" accept="image/jpeg,image/jpg,image/png,image/webp" style="display:none">
            <button class="analyze-btn" id="select-file-btn">파일 선택</button>
        </div>
        <div class="preview-container" id="preview-container" style="display: none;">
            <img id="preview-img" src="" alt="미리보기">
            <button class="analyze-btn" id="reselect-file-btn">다시 선택</button>
        </div>
        <div class="analyze-container" style="display: none;">
            <div class="analyze-process">
                <div class="analyze-info">
                    <h2>이미지 전처리</h2>
                    <p>이미지 품질 향상 및 노이즈 제거</p>
                </div>
                <div class="progress-mark">
                    <progress class="progress-bar"  id="progress-bar1" value="0" max="100"></progress>
                    <svg class="progress-checkmark" id="progress-check1"    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 640">
                        <!--!Font Awesome Free v7.0.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
                        <path fill="none" d="M530.8 134.1C545.1 144.5 548.3 164.5 537.9 178.8
                           L281.9 530.8C276.4 538.4 267.9 543.1 258.5 543.9
                           C249.1 544.7 240 541.2 233.4 534.6L105.4 406.6
                           C92.9 394.1 92.9 373.8 105.4 361.3
                           C117.9 348.8 138.2 348.8 150.7 361.3
                           L252.2 462.8L486.2 141.1C496.6 126.8 516.6 123.6 530.9 134z"/>
                    </svg>
                </div>
            </div>
            <div class="analyze-process">
                <div class="analyze-info">
                    <h2>객체 검출</h2>
                    <p>머신러닝 및 딥러닝 모델을 통한 불순물 검출</p>
                </div>
                <div class="progress-mark">
                    <progress class="progress-bar"  id="progress-bar2" value="0" max="100"></progress>
                    <svg class="progress-checkmark" id="progress-check2"    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 640">
                        <!--!Font Awesome Free v7.0.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
                        <path fill="none" d="M530.8 134.1C545.1 144.5 548.3 164.5 537.9 178.8
                           L281.9 530.8C276.4 538.4 267.9 543.1 258.5 543.9
                           C249.1 544.7 240 541.2 233.4 534.6L105.4 406.6
                           C92.9 394.1 92.9 373.8 105.4 361.3
                           C117.9 348.8 138.2 348.8 150.7 361.3
                           L252.2 462.8L486.2 141.1C496.6 126.8 516.6 123.6 530.9 134z"/>
                    </svg>
                </div>
            </div>
            <div class="analyze-process">
                <div class="analyze-info">
                    <h2>불순물 분류</h2>
                    <p>검출된 객체의 종류 및 분류</p>
                </div>
                <div class="progress-mark">
                    <progress class="progress-bar"  id="progress-bar3" value="0" max="100"></progress>
                    <svg class="progress-checkmark" id="progress-check3"    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 640">
                        <!--!Font Awesome Free v7.0.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
                        <path fill="none" d="M530.8 134.1C545.1 144.5 548.3 164.5 537.9 178.8
                           L281.9 530.8C276.4 538.4 267.9 543.1 258.5 543.9
                           C249.1 544.7 240 541.2 233.4 534.6L105.4 406.6
                           C92.9 394.1 92.9 373.8 105.4 361.3
                           C117.9 348.8 138.2 348.8 150.7 361.3
                           L252.2 462.8L486.2 141.1C496.6 126.8 516.6 123.6 530.9 134z"/>
                    </svg>
                </div>
            </div>
        </div>
    </div>
    <div class="after-upload-container" id="after-upload-container">
        <div class="analyze-ready-container" id="analyze-ready" style="display: none;">
            <p class="cond-label" id="cond-label"></p>
            <button class="analyze-btn" id="start-analyze-btn" style="display:none;">분석 시작</button>
        </div>
        <div class="analyze-done-container" id="analyze-done" style="display: none;">
            <p class="done-label" id="done-label">분석이 완료되었습니다. 분석결과를 확인해주세요.</p>
            <button class="analyze-btn" id="result-analyze-btn">분석 결과</button>
        </div>
    </div>
</div>


<script>
    const popup = document.getElementById('popup');
    const popup_btn = document.getElementById('notice_icon');
    const close_btn = document.getElementById('close');
    popup_btn.addEventListener('click', () => popup.style.display = 'block');
    close_btn.addEventListener('click', () => popup.style.display = 'none');

    // --- 요소 참조 ---
    const fileInput = document.getElementById('file-input');
    const selectFileBtn = document.getElementById('select-file-btn');
    const reselectFileBtn = document.getElementById('reselect-file-btn');
    const beforeUpload = document.getElementById('before-upload-container');
    const previewContainer = document.getElementById('preview-container');
    const previewImg = document.getElementById('preview-img');
    const analyzeReady = document.getElementById('analyze-ready');
    const condLabel = document.getElementById('cond-label');
    const analyzeStartBtn = document.getElementById('start-analyze-btn');
    const analyzeDone = document.getElementById('analyze-done');
    const analyzeResultBtn = document.getElementById('result-analyze-btn');
    const uploadContainer = document.querySelector('.upload-container');
    const analyzeContainer = document.querySelector('.analyze-container');

    const validExtensions = ['jpeg', 'jpg', 'png','webp'];
    const maxSize = 10 * 1024 * 1024;
    const csrfToken = document.querySelector('input[name="_csrf"]').value;
    let lastSelectedFile = null;
    let origImageId = null;

// --- 프로그레스바 목록 ---
    const progressBars = [
        { bar: document.getElementById('progress-bar1'), check: document.getElementById('progress-check1') },
        { bar: document.getElementById('progress-bar2'), check: document.getElementById('progress-check2') },
        { bar: document.getElementById('progress-bar3'), check: document.getElementById('progress-check3') }
];

// --- 파일 선택 ---
    selectFileBtn.addEventListener('click', () => fileInput.click());
    fileInput.addEventListener('change', handleFileSelect);
    reselectFileBtn.addEventListener('click', () => { fileInput.value = ''; fileInput.click(); });

    // 파일 선택 시
    function handleFileSelect() {
        if (fileInput.files.length === 0) return;
        const file = fileInput.files[0];
        lastSelectedFile = file;
        const ext = file.name.split('.').pop().toLowerCase();

        if (!validExtensions.includes(ext)) {
            condLabel.innerText = '지원되지 않는 파일 형식입니다. 다른 파일을 선택해주세요.';
            condLabel.style.color = 'red';
        } else if (file.size > maxSize) {
            condLabel.innerText = '파일 용량이 10MB를 초과했습니다. 다른 파일을 선택해주세요.';
            condLabel.style.color = 'red';
        } else {
            condLabel.innerText = '';
            analyzeStartBtn.style.display = 'block';
        }

        beforeUpload.style.display = 'none';
        previewContainer.style.display = 'flex';
        analyzeReady.style.display = 'flex';

        const reader = new FileReader();
        reader.onload = e => previewImg.src = e.target.result;
        reader.readAsDataURL(file);

        fileInput.value = '';
    }

    // --- 분석 시작 ---
    analyzeStartBtn.addEventListener('click', async () => {
        const file = fileInput.files.length > 0 ? fileInput.files[0] : lastSelectedFile;
        if (!file) return;

        try {
            prepareUIForAnalysis();

            // 1️⃣ 이미지 규격 검사
            await performStep1Validation(file);

            // 2️⃣ 딥러닝 분석 (기존 upload)
            await performStep2Analysis(file);

            // 3️⃣ 결과 정리 (하드코딩)
            await performStep3Finalize();

            showAnalysisComplete();

        } catch (err) {
            console.error('분석 실패:', err);
            alert('분석 실패: ' + err.message);
            resetAnalysisUI();

            condLabel.innerText = '분석 중 오류가 발생했습니다. 다시 시도해주세요.';
            condLabel.style.color = 'red';
            analyzeReady.style.display = 'flex';
            analyzeStartBtn.style.display = 'none'; // 분석 시작 버튼은 숨김


        }
    });

    /**
     * 1단계: 이미지 규격 검사
     * 🎯 응답 올 때까지 0% 대기 → 응답 오면 100%까지 채우기
     */
    async function performStep1Validation(file) {
        const { bar, check } = progressBars[0];
        bar.value = 0;

        try {
             //✅ 실제 fetch (주석 해제 시 사용)
             const formData = new FormData();
             formData.append('image', file);
             const res = await fetch('/api/images/validate', {
                 method: 'POST',
                 headers: { 'X-CSRF-TOKEN': csrfToken },
                 body: formData
             });
             const data = await res.json();

            // 🧪 가짜 응답 시뮬레이션 (응답 올 때까지 대기)
<!--            await new Promise(res => setTimeout(res, 1500));-->
<!--            const data = { status: 0 };-->

            if (data.status !== '0') throw new Error(data.error || '이미지 규격 검사 실패');

            // 🎯 응답 온 후 0 → 100%까지 채우기
            await fillProgressBar(bar, 500); // 0.5초 동안

            // 체크마크 애니메이션
            check.classList.add('animate');
            await sleep(300);
            check.classList.add('fill');
            await sleep(200);

        } catch (err) {
            throw err;
        }
    }

    /**
     * 2단계: 딥러닝 분석
     * 🎯 응답 올 때까지 0% 대기 → 응답 오면 100%까지 채우기
     */
    async function performStep2Analysis(file) {
        const { bar, check } = progressBars[1];
        bar.value = 0;

        try {
            // ✅ 실제 fetch (주석 해제 시 사용)
             const formData = new FormData();
             formData.append('image', file);
             const res = await fetch('/api/images/upload', {
                 method: 'POST',
                 headers: { 'X-CSRF-TOKEN': csrfToken },
                 body: formData
             });
             const data = await res.json();

<!--            // 🧪 가짜 응답 시뮬레이션 (응답 올 때까지 대기)-->
<!--            await new Promise(res => setTimeout(res, 2000));-->
<!--            const data = { id: 'dummy-result-id' };-->

            if (!data.id) throw new Error('딥러닝 분석 실패 (ID 없음)');
            origImageId = data.id;

            // 🎯 응답 온 후 0 → 100%까지 채우기
            await fillProgressBar(bar, 600); // 0.6초 동안

            check.classList.add('animate');
            await sleep(300);
            check.classList.add('fill');
            await sleep(200);

        } catch (err) {
            throw err;
        }
    }

    /**
     * 3단계: 결과 정리 (하드코딩)
     */
    async function performStep3Finalize() {
        const { bar, check } = progressBars[2];
        bar.value = 0;

        // 처음부터 끝까지 부드럽게
        await fillProgressBar(bar, 600); // 0.6초 동안

        check.classList.add('animate');
        await sleep(300);
        check.classList.add('fill');
        await sleep(200);
    }

    /**
     * 🎯 0%에서 100%까지 부드럽게 채우는 함수
     * @param {HTMLProgressElement} bar - 프로그레스바 요소
     * @param {number} duration - 채우는데 걸리는 시간 (밀리초)
     */
    async function fillProgressBar(bar, duration) {
        const steps = 30; // 부드러움 정도
        const increment = 100 / steps;
        const delay = duration / steps;

        for (let i = 0; i < steps; i++) {
            bar.value = Math.min(increment * (i + 1), 100);
            await sleep(delay);
        }
        bar.value = 100;
    }

    // --- 유틸리티 ---
    function sleep(ms) { return new Promise(res => setTimeout(res, ms)); }

    function prepareUIForAnalysis() {
        analyzeReady.style.display = 'none';
        reselectFileBtn.style.display = 'none';
        uploadContainer.classList.add('analyzing');
        analyzeContainer.style.display = 'flex';
        analyzeContainer.style.opacity = '1';
    }

    function resetAnalysisUI() {
        uploadContainer.classList.remove('analyzing');
        analyzeContainer.style.display = 'none';
        analyzeReady.style.display = 'flex';
        reselectFileBtn.style.display = 'block';
        progressBars.forEach(({ bar, check }) => {
            bar.value = 0;
            check.classList.remove('animate', 'fill');
        });
    }

    function showAnalysisComplete() {
        analyzeDone.style.display = 'flex';
    }

    analyzeResultBtn.addEventListener('click', () => {
        if (!origImageId) return alert('결과 ID가 없습니다.');
        window.location.href = '/result/' + origImageId;
    });


</script>
</body>
</html>
