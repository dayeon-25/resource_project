<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Intro Page</title>
    <link rel="stylesheet" href="/css/common.css">
    <link rel="stylesheet" href="/css/about.css">
	<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v3.min.js"></script>


</head>
<body>
{{> layout/header}}

<!--'탄소 중립은' 섹션-->
<section id="carbon-neutrality" class="carbon-neutrality-section" data-theme="light">
	<span class="section-label">ABOUT CARBON NEUTRALITY</span>

	<div class="carbon-content-wrapper">
		<div class="section-header">
			<h2 class="section-title">탄소 중립은</h2>
		</div>

		<div class="section-content">
			<div class="content-text fade-in-element">
				인간의 활동으로 배출되는 이산화탄소를 흡수하거나 제거하여 <br>
				실질적인 배출량을 <strong>‘0’</strong>으로 만드는 <br>
				지속가능한 기후 대응 전략입니다.
			</div>

			<div class="body-text fade-in-element">
				<p>
					지구 온난화와 기후위기의 주된 원인인 온실가스를 줄이기 위해, 전 세계는 탄소중립 달성을 핵심 과제로 삼고 있습니다. <br>
                    탄소중립은 단순히 배출을 줄이는 데 그치지 않고, 재생에너지 확대, 에너지 효율 개선, 순환경제 실현, 친환경 기술 개발 등을 통해 달성할 수 있습니다. <br>
					국가와 기업뿐만 아니라 개인의 생활 방식 변화 역시 중요한 요소이며, 작은 실천이 모여 큰 변화를 만들어낼 수 있습니다. <br>
					탄소중립은 미래 세대를 위한 선택이 아닌 지금 우리가 반드시 실천해야 할 과제입니다.
				</p>
			</div>

			<div class="tags fade-in-element">
			   <span class="tag tag-item">#탄소중립</span>
				<span class="tag tag-item">#친환경솔루션</span>
				<span class="tag tag-item">#재생에너지</span>
				<span class="tag tag-item">#순환경제</span>
				<span class="tag tag-item">#온실가스감축</span>
			</div>
		</div>
	</div>
</section>
<!--'탄소 중립은' 섹션 끝-->
<!--'탄소 중립은' JS-->
<script>
document.addEventListener('DOMContentLoaded', () => {
const observerOptions = {
root: null,
rootMargin: '0px 0px -100px 0px',
threshold: 0.15
};

const observer = new IntersectionObserver((entries) => {
entries.forEach(entry => {
if (entry.isIntersecting) {
entry.target.classList.add('visible');
observer.unobserve(entry.target);
}
});
}, observerOptions);

const fadeElements = document.querySelectorAll('.carbon-neutrality-section .fade-in-element');
fadeElements.forEach(element => {
observer.observe(element);
});
});
</script>

<!--건설로 실현하는 탄소 중립 섹션-->
<section id="construction" class="construction-section" data-theme="light">
    <span class="construction-label">ABOUT CARBON NEUTRALITY</span>

        <div class="construction-header">
            <h2 class="construction-title">건설로 실현하는 탄소 중립</h2>
        </div>

    <div class="construction-grid">
        <div class="construction-card">
            <div class="construction-image">
                <img src="/images/construction1.png">
				<div class="card-overlay">
            <h3 class="card-title">저탄소 자재</h3>
            <p class="card-text">순환골재, 저탄소 시멘트</p>
        </div>
			</div>
		</div>

        <div class="construction-card">
            <div class="construction-image">
                <img src="/images/construction2.png">
				<div class="card-overlay">
            <h3 class="card-title">에너지 효율</h3>
            <p class="card-text">제로에너지 빌딩 운영</p>
        </div>
			</div>
		</div>

        <div class="construction-card">
            <div class="construction-image">
                <img src="/images/construction3.png">
				<div class="card-overlay">
            <h3 class="card-title">순환 경제</h3>
            <p class="card-text">폐기물의 자원화</p>
        </div>
			</div>
		</div>

        <div class="construction-card">
            <div class="construction-image">
                <img src="/images/construction4.png">
				<div class="card-overlay">
            <h3 class="card-title">디지털 기술</h3>
            <p class="card-text">BIM, AI, IoT 활용</p>
        </div>
        </div>
		</div>
	</div>
</section>
<!--건설로 실현하는 탄소 중립 섹션 끝-->
<!--건설 탄중 JS-->
<script>
	document.addEventListener('DOMContentLoaded', () => {
		const observerOptions = {
			root: null,
			rootMargin: '0px 0px -100px 0px',
			threshold: 0.15
		};

		const observer = new IntersectionObserver((entries) => {
			entries.forEach(entry => {
				if (entry.isIntersecting) {
					entry.target.classList.add('visible');
					observer.unobserve(entry.target);
				}
			});
		}, observerOptions);

		const fadeElements = document.querySelectorAll('.carbon-neutrality-section .fade-in-element');
		fadeElements.forEach(element => {
			observer.observe(element);
		});

		const cardObserver = new IntersectionObserver((entries) => {
			entries.forEach(entry => {
				if (entry.isIntersecting) {
					entry.target.classList.add('visible');
				}
			});
		}, {
			threshold: 0.2
		});

		const constructionCards = document.querySelectorAll('.construction-card');
		constructionCards.forEach(card => {
			cardObserver.observe(card);
		});
	});
</script>

<!--순환 골재는 섹션-->
<section id="recycled-aggregate" class="aggregate-section" data-theme="light">
    <div class="aggregate-sticky">
        <div class="aggregate-content">
            <div class="aggregate-top">
                <div class="texts">
                    <p><strong>순환골재는</strong></p>
                    <p>건설폐기물을 재활용해 만든 친환경 건설 자재입니다.</p>
                    <p>천연골재 채취로 인한 환경 파괴와 폐기물 매립 문제를 줄이고,</p>
                    <p>온실가스 배출 감소로 탄소중립 실현에 기여합니다.</p>
                </div>
            </div>


    <div class="aggregate-down">
    <div class="aggregate-images">
        <div class="aggregate-image image1">
            <img src="/images/aggregate1.png" alt="순환골재 1">
        </div>

        <div class="aggregate-image image2">
            <img src="/images/aggregate2.png" alt="순환골재 2">
        </div>

        <div class="aggregate-image image3">
            <img src="/images/aggregate3.png" alt="순환골재 3">
        </div>

        <div class="aggregate-image image4">
            <img src="/images/aggregate4.png" alt="순환골재 4">
        </div>

    </div>
     </div>
    </div>
    </div>
</section>

<!--순환 골재는 JS-->
<script>
document.addEventListener("DOMContentLoaded", () => {
    const section = document.querySelector('.aggregate-section');
    const textLines = document.querySelectorAll('.texts p');
    const images = document.querySelectorAll('.aggregate-image');
    const viewportHeight = window.innerHeight;

    function animateOnScroll() {
        const scrollY = window.scrollY;
        const sectionTop = section.offsetTop;
        const sectionHeight = section.offsetHeight;

        const progress = Math.min(Math.max((scrollY - sectionTop) / (sectionHeight - viewportHeight), 0), 1);

        // 텍스트 페이드인
        textLines.forEach((line, i) => {
            const start = 0.08 + i * 0.06;
            const end = start + 0.3;
            const textProgress = Math.max(0, Math.min(1, (progress - start) / (end - start)));
            line.style.opacity = textProgress;
            line.style.transform = `translateY(${30 - 30 * textProgress}px)`;
            });

		const textDoneProgress = 0.08 + (textLines.length - 1) * 0.06 + 0.3;

		// 첫 번째 이미지
		const firstImageStart = textDoneProgress;
        const firstImageEnd = textDoneProgress + 0.15;
        const firstImageProgress = Math.max(0, Math.min(1, (progress - firstImageStart) / (firstImageEnd - firstImageStart)));

		if (progress >= firstImageStart) {
            images[0].style.opacity = firstImageProgress;
            const translateY = 50 * (1 - firstImageProgress);
            images[0].style.transform = `translateY(${translateY}px)`;
        } else {
            images[0].style.opacity = 0;
            images[0].style.transform = `translateY(50px)`;
        }

		// 2,3 이미지
		[1, 2].forEach((i) => {
            const start = firstImageEnd + 0.08 + (i - 1) * 0.12;
            const end = start + 0.15;
            const moveProgress = Math.max(0, Math.min(1, (progress - start) / (end - start)));

            if (progress >= start) {
                images[i].style.opacity = moveProgress;
                images[i].style.transform = `translateY(${viewportHeight * (1 - moveProgress)}px)`;
            } else {
                images[i].style.opacity = 0;
                images[i].style.transform = `translateY(${viewportHeight}px)`;
            }
        });

		// 마지막 이미지
		const lastIndex = 3;
		 const secondImageEnd = firstImageEnd + 0.08 + (1 - 1) * 0.12 + 0.15;
        const lastAppearStart = thirdImageEnd + 0.1;
        const lastAppearEnd = lastAppearStart + 0.12;
        const lastGrowStart = lastAppearEnd;
        const lastGrowEnd = 0.99;

        let appearProgress = Math.max(0, Math.min(1, (progress - lastAppearStart) / (lastAppearEnd - lastAppearStart)));
        let translateYValue = viewportHeight * (1 - appearProgress);

        if (progress >= lastAppearStart) {
            images[lastIndex].style.opacity = appearProgress;

            if (progress >= lastAppearEnd) {
                images[lastIndex].style.transform = `translateY(0px)`;
            } else {
                images[lastIndex].style.transform = `translateY(${translateYValue}px)`;
            }

        // 확대 효과 (grow)
        if (progress >= lastGrowStart && progress <= lastGrowEnd) {
            const growProgress = Math.max(0, Math.min(1, (progress - lastGrowStart) / (lastGrowEnd - lastGrowStart)));
            const size = 100 + growProgress * 150;
            images[lastIndex].style.width = `${size}%`;
            images[lastIndex].style.height = `${size}%`;
        } else if (progress > lastGrowEnd) {
            images[lastIndex].style.width = '250%';
            images[lastIndex].style.height = '250%';
        } else {
            images[lastIndex].style.width = '100%';
            images[lastIndex].style.height = '100%';
        }
    } else {
        images[lastIndex].style.opacity = 0;
        images[lastIndex].style.transform = `translateY(${viewportHeight}px)`;
        images[lastIndex].style.width = '100%';
        images[lastIndex].style.height = '100%';
    }
}

    window.addEventListener('scroll', animateOnScroll);
    window.addEventListener('resize', animateOnScroll);
    animateOnScroll();
});
</script>
<!--순환 골재는 섹션 끝-->

<!--사용 용도 섹션1-->
<div class="usage-section1-wrapper">
    <section id="usage" class="usage-section usage-section1" data-theme="dark">
        <div class="usage-intro">
            <h2 class="usage-intro-text">WASTE TO RESOURCE</h2>
        </div>
    </section>
</div>

<!--사용 용도 섹션 JS 합치기-->
<script>
    document.addEventListener('DOMContentLoaded', () => {

	// 섹션1 애니메이션 부분
	const usageWrapper = document.querySelector('.usage-section1-wrapper');
	const usageText = document.querySelector('.usage-intro-text');

	const USAGE_CONFIG = {
		fadeIn: {
			startProgress: 0.05,
			endProgress: 0.25,
			scaleFrom: 0.8,
			scaleTo: 1
		},

		hold: {
			startProgress: 0.25,
			endProgress: 0.7
		},

		fadeOut: {
			startProgress: 0.7,
			endProgress: 0.85,
			moveDistance: -400
		}
	};

	function calculateProgress(current, start, end) {
		return Math.max(0, Math.min(1, (current - start) / (end - start)));
	}

	function animateUsageSection1() {

       const usageHeader = document.querySelector('.usage-header');
       const firstUsageCard = document.querySelector('.usage-item:first-child');

       const wrapperRect = usageWrapper.getBoundingClientRect();
       const wrapperHeight = usageWrapper.offsetHeight;
       const viewportHeight = window.innerHeight;
       const scrollStart = wrapperRect.top;
       const scrollRange = wrapperHeight - viewportHeight;
       const progress = Math.max(0, Math.min(1, -scrollStart / scrollRange));

		// 섹션1 텍스트 애니메이션 효과
        if (progress >= USAGE_CONFIG.fadeIn.startProgress && progress <= USAGE_CONFIG.fadeIn.endProgress) {
            const fadeInProgress = calculateProgress(progress, USAGE_CONFIG.fadeIn.startProgress, USAGE_CONFIG.fadeIn.endProgress);
            const scale = USAGE_CONFIG.fadeIn.scaleFrom + (USAGE_CONFIG.fadeIn.scaleTo - USAGE_CONFIG.fadeIn.scaleFrom) * fadeInProgress;
            usageText.style.opacity = fadeInProgress;
            usageText.style.transform = `scale(${scale})`;
       }
        else if (progress > USAGE_CONFIG.hold.startProgress && progress <= USAGE_CONFIG.hold.endProgress) {
          usageText.style.opacity = 1;
          usageText.style.transform = `scale(1)`;
        }
        else if (progress > USAGE_CONFIG.fadeOut.startProgress && progress <= USAGE_CONFIG.fadeOut.endProgress) {
          const fadeOutProgress = calculateProgress(progress, USAGE_CONFIG.fadeOut.startProgress, USAGE_CONFIG.fadeOut.endProgress);
          const moveY = USAGE_CONFIG.fadeOut.moveDistance * fadeOutProgress;
          const opacity = 1 - fadeOutProgress;
          usageText.style.opacity = opacity;
          usageText.style.transform = `translateY(${moveY}px) scale(1)`;
        }
        else if (progress < USAGE_CONFIG.fadeIn.startProgress) {
          usageText.style.opacity = 0;
          usageText.style.transform = `scale(${USAGE_CONFIG.fadeIn.scaleFrom})`;
        }
        else if (progress > USAGE_CONFIG.fadeOut.endProgress) {
          usageText.style.opacity = 0;
          usageText.style.transform = `translateY(${USAGE_CONFIG.fadeOut.moveDistance}px)`;
        }

		// 섹션2 헤더 애니메이션 부분 (페이드인 효과)
		const headerStart = 0.65;
		const headerEnd = 0.80;
		const headerProgress = calculateProgress(progress, headerStart, headerEnd);

		if (usageHeader) {
			if (headerProgress > 0) {
				const translateY = 150 * (1 - headerProgress);
				usageHeader.style.opacity = headerProgress;
				usageHeader.style.transform = `translateY(${translateY}px)`;
			} else {
				usageHeader.style.opacity = 0;
				usageHeader.style.transform = `translateY(150px)`;
			}
		}

		// 첫 번째 카드 애니메이션 (페이드 인 효과)
		const cardStart = 0.65;
		const cardEnd = 0.90;
		const cardProgress = calculateProgress(progress, cardStart, cardEnd);

		if (firstUsageCard) {
			if (cardProgress > 0) {
				const translateY = 250 * (1 - cardProgress);
				firstUsageCard.style.opacity = cardProgress;
				firstUsageCard.style.transform = `translateY(${translateY}px)`;
			} else {
				firstUsageCard.style.opacity = 0;
				firstUsageCard.style.transform = `translateY(250px)`;
			}
		}
	}

	let ticking = false;
	window.addEventListener('scroll', () => {
		if (!ticking) {
			window.requestAnimationFrame(() => {
				animateUsageSection1();
				ticking = false;
			});
			ticking = true;
		}
	});

	animateUsageSection1();


    //섹션2 나머지 이미지 카드 애니메이션 추가 부분
    const usageItems = document.querySelectorAll('.usage-item:not(:first-child)');
    const observerOptions = {
        root: null,
        threshold: 0.2,
        rootMargin: '0px 0px -150px 0px'
    };

    const itemObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {

            if (entry.isIntersecting) {
                entry.target.classList.add('animate-in');
                itemObserver.unobserve(entry.target);
            }
        });
    }, observerOptions);

    usageItems.forEach(item => {
        itemObserver.observe(item);
    });
    });

</script>

<!--사용 용도 섹션2-->
<section id="usage" class="usage-section usage-section2" data-theme="dark">
    <div class="usage-content">
    <div class="usage-header">
        <span class="usage-label">탄소저감</span>
        <h2 class="usage-title">
			순환골재로 <br>
			이어가는<br>
            친환경 미래
		</h2>
    </div>

<div class="usage-list">
    	<div class="usage-item">
			<div class="usage-card">
				<div class="usage-image">
					<img src="/images/usage1.png" alt="도로건설">
						<h3 class="usage-image-title">도로 건설</h3>
				</div>
				<p class="usage-text">
					도로의 기층 및 보조 기층 재료로 활용되어 <br>
					내구성과 경제성을 동시에 확보합니다.
				</p>
			</div>
	</div>


    <div class="usage-item">
		<div class="usage-card">
			<div class="usage-image">
				<img src="/images/usage2.png" alt="건물기초">
				<h3 class="usage-image-title">건물 기초</h3>
			</div>
			<p class="usage-text">
				건물의 기초 콘크리트 제조에 사용되어 <br>
				구조적 안정성을 제공합니다.
			</p>
		</div>
	</div>


        <div class="usage-item">
			<div class="usage-card">
				<div class="usage-image">
					<img src="/images/usage3.png" alt="조경공사">
					<h3 class="usage-image-title">조경 공사</h3>
				</div>
					<p class="usage-text">
						공원과 정원의 배수층 및 보행로 조성에 활용되어 <br>
						자연친화적 공간을 만듭니다.
					</p>
			</div>
		</div>
        </div>
	</div>

	<div class="usage-marquee">
		<div class="marquee-content">
             <span class="marquee-list">
                <span class="marquee-item">WASTE TO RESOURCE</span>
                <span class="marquee-item">WASTE TO RESOURCE</span>
                <span class="marquee-item">WASTE TO RESOURCE</span>
                <span class="marquee-item">WASTE TO RESOURCE</span>
                <span class="marquee-item">WASTE TO RESOURCE</span>
             </span>
		</div>
	</div>
</section>
<!--사용 용도 섹션 끝-->

<!--통계 섹션-->
<section id="stats" class="stats-section" data-theme="light">
    <!-- 왼쪽: 바 + 라인 -->
    <div class="stats-section-left">
        <div class="bar-chart-container">
            <div class="bar-chart-title">
                <h2>건설폐기물 재활용률</h2>
                <p>2018-2021년 재활용률(%):(재활용량/발생량)x100</p>
            </div>
            <div class="bar-chart-size">
                <canvas id="usage-bar-chart"></canvas>
            </div>
        </div>

        <div class="line-chart-container">
            <div class="line-chart-title">
                <h2>건설폐기물 발생량 대비 순환골재 사용량</h2>
                <p>2020-2023년 추이 (단위:만톤)</p>
            </div>
            <div class="donut-chart-size">
                <canvas id="usage-line-chart"></canvas>
            </div>
        </div>
    </div>

    <!-- 가운데: 제목 + 지도 -->
    <div class="stats-section-center">
        <div class="korea-map-container" style="text-align:center;">
            <h1 class="section-title">데이터로 보는 순환골재</h1>
            <p>지도위에 마우스를 올리면 지역별 생산량을 확인하실 수 있습니다.</p>
            <svg id="usage-korea-map"></svg>
        </div>
    </div>

    <!-- 오른쪽: 도넛 -->
    <div class="stats-section-right">
        <div class="total-number-container">
            <div class="up-total-number">
                <p>무슨무슨 총량</p>
                <h1>4,323</h1>
            </div>
            <div class="down-total-number">
                <p>무슨무슨 총량</p>
                <h1>4,323</h1>
            </div>
        </div>
        <div class="donut-chart-container">
            <div class="donut-chart-title">
                <h2>용도별 순환골재 사용량</h2>
                <p>2020-2021년 평균 (단위:만톤)</p>
            </div>
            <div class="donut-chart-size">
                <canvas id="usage-donut-chart"></canvas>
            </div>
        </div>
    </div>
</section>


<div id="tooltip" style="
    position: absolute;
    background-color: rgba(0,0,0,0.7);
    color: white;
    padding: 5px 10px;
    border-radius: 5px;
    pointer-events: none;
    font-size: 14px;
    opacity: 0;
    transition: opacity 0.2s;
"></div>
<!--통계 섹션 끝-->
<!--통계 섹션 JS-->
<script>
    new Chart(document.getElementById("usage-line-chart").getContext('2d'), {
       type: 'line',
       data: {
           labels: ["2020","2021","2022","2023"],
           datasets: [
           {
               label: "건설 폐기물 발생량",
               data: [8644,8381,7681,6437],
                borderColor: '#13a162'
            },
            {
                label: "순환 골재 사용량",
                data: [5024,5217,5333,5111],
                borderColor: '#d04522'
            }
            ]
        },
        options: {
            responsive: true,       // 차트가 부모 컨테이너 크기에 맞춰 자동으로 크기 조정됨
            maintainAspectRatio: false, // true면 aspect-ratio 고정, false면 부모 크기에 맞춤
            plugins: {
                legend: { display: true }, // 범례 표시 여부
            }
        }
    });


     new Chart(document.getElementById("usage-donut-chart").getContext('2d'), {
       type: 'doughnut',
       data: {
           labels: ["성토용","도로기층용","복토용","콘크리트용","기타"],
           datasets: [{
               data: [38,27,21,10,5],
               backgroundColor: ['#035220','#4b5b70','#be563d','#a46645','#4e4c4c']
           }]
       },
       options: {
           responsive: true,       // 차트가 부모 컨테이너 크기에 맞춰 자동으로 크기 조정됨
           maintainAspectRatio: false, // true면 aspect-ratio 고정, false면 부모 크기에 맞춤
           plugins: {
               legend: { display: true }, // 범례 표시 여부
           }
       }
   });

   new Chart(document.getElementById("usage-bar-chart").getContext('2d'), {
        type: 'bar',
        data: {
            labels: ["2018","2019","2020","2021"],
            datasets: [
            {
                label: "건설폐기물 재활용률",
                data: [50,60,65,60],
                backgroundColor: '#f1512e'
            }
            ]
        },
        options: {
            indexAxis: 'y',
            responsive: true,       // 차트가 부모 컨테이너 크기에 맞춰 자동으로 크기 조정됨
            maintainAspectRatio: false, // true면 aspect-ratio 고정, false면 부모 크기에 맞춤
            plugins: {
                legend: { display: true }, // 범례 표시 여부
            }
        }
    });

      const regionColors = {
        "서울특별시": "#f94144",
        "부산광역시": "#f3722c",
        "대구광역시": "#f8961e",
        "인천광역시": "#f9844a",
        "광주광역시": "#f9c74f",
        "대전광역시": "#90be6d",
        "울산광역시": "#43aa8b",
        "세종특별자치시": "#4d908e",
        "경기도": "#577590",
        "강원도": "#277da1",
        "충청북도": "#720026",
        "충청남도": "#d00000",
        "전라북도": "#ffb703",
        "전라남도": "#fb8500",
        "경상북도": "#023047",
        "경상남도": "#219ebc",
        "제주특별자치도": "#8ecae6"
    };

    const regionData = {
    "서울특별시": "10%",
    "부산광역시": "12%",
    "대구광역시": "8%",
    "인천광역시": "9%",
    "광주광역시": "7%",
    "대전광역시": "6%",
    "울산광역시": "5%",
    "세종특별자치시": "3%",
    "경기도": "20%",
    "강원도": "4%",
    "충청북도": "3%",
    "충청남도": "6%",
    "전라북도": "4%",
    "전라남도": "5%",
    "경상북도": "7%",
    "경상남도": "8%",
    "제주특별자치도": "3%"
};



    const svg = d3.select("#usage-korea-map");
    const tooltip = d3.select("#tooltip");

   fetch('/data/skorea-provinces-2018-topo.json')
    .then(res => res.json())
    .then(data =>{
    const geoData = topojson.feature(data, data.objects.skorea_provinces_2018_geo);

    const projection = d3.geoMercator()
        .center([128,36])
        .scale(5500)
        .translate([250,380]);

    const path = d3.geoPath().projection(projection);

    svg.selectAll("path")
        .data(geoData.features)
        .enter()
        .append("path")
        .attr("d", path)
        .attr("stroke","#333")
        .attr("fill", "white")
        .attr("stroke-width",0.5)
        .on("mouseover", function(event,d){
            // hover 색 변경
            d3.select(this)
                .transition()
                .duration(200)
                .attr("fill", d=> regionColors[d.properties.name] || "#ffd700")
                .attr("transform", "translate(0,-5)"); // 살짝 위로
            // tooltip 표시
            if(d.properties && d.properties.name){
                tooltip.style("opacity", 1)
                       .html(`${d.properties.name}: ${regionData[d.properties.name] || "-"}`);
            }
        })
        .on("mousemove", function(event){
            tooltip.style("left", (event.pageX + 10) + "px")
                   .style("top", (event.pageY + 10) + "px");
        })
        .on("mouseout", function(){
            // 색 원상복귀
            d3.select(this)
                .transition()
                .duration(200)
                .attr("fill", "white")
                .attr("transform", "translate(0,0)"); // 원래 위치
            // tooltip 숨김
            tooltip.style("opacity", 0);
        });
    });

</script>


<!--시뮬레이션 섹션-->
<section id="simulation" class="simulation-section" data-theme="light">
	<div class="section-header">
		<span class="section-label">SIMULATION</span>
		<h2 class="simulation-title">순환골재의 사용 효과</h2>
	</div>

	<div class="simulation-content">
		<p class="simulation-description">
			슬라이더를 움직여 순환골재 사용 비율에 따른 <strong>탄소 저감량</strong>과 <strong>비용 절감 효과</strong>를 실시간으로 확인하세요
		</p>
		<p class="simulation-text">
			기준: 건물 면적이 1000m^3 건물 기준 (골재 1,600톤)
		</p>

		<!-- 슬라이더 부분 -->
		<div class="simulation-slider">
			<div class="slider-wrapper">
				<input type="range" id="recycleSlider" min="0" max="100" value="40">
				<div class="slider-tooltip" id="sliderTooltip">40%</div>
			</div>
			<div class="slider-marks">
				<span style="left: 0%">0</span>
				<span style="left: 10%">10</span>
				<span style="left: 20%">20</span>
				<span style="left: 30%">30</span>
				<span style="left: 40%">40</span>
				<span style="left: 50%">50</span>
				<span style="left: 60%">60</span>
				<span style="left: 70%">70</span>
				<span style="left: 80%">80</span>
				<span style="left: 90%">90</span>
				<span style="left: 100%">100</span>
			</div>
		</div>


	<!--숫자 카운터 결과 부분-->
		<div class="simulation-results">
			<div class="result-card">
				<h3 class="result-title">탄소 저감 효과</h3>
				<div class="result-value">
					<span class="result-label">저감된 탄소배출량 :</span>
					<span class="result-number" id="carbonValue">825.6</span>
					<span class="result-unit">kgCO2</span>
				</div>
			</div>

			<div class="result-card">
				<h3 class="result-title">비용 절감 효과</h3>
				<div class="result-value">
					<span class="result-label">절감된 비용량 :</span>
					<span class="result-number" id="costValue">366</span>
					<span class="result-unit">만원</span>
				</div>
			</div>
		</div>
	</div>
</section>
<!--시뮬레이션 섹션 끝-->
<!--시뮬레이션 JS-->
<script>

	const TOTAL_AGGREGATE = 1600; //총 골재 사용량
	const CO2_REDUCTION_PER_TON = 1.29; //CO^2 절감
	const COST_REDUCTION_PER_TON = 5719; //비용 절감

	const slider = document.getElementById('recycleSlider');
	const sliderTooltip = document.getElementById('sliderTooltip');
	const carbonValue = document.getElementById('carbonValue');
	const costValue = document.getElementById('costValue');

	// 카운트업 애니메이션
	function countUp(element, targetValue, decimals = 0) {
		const startValue = parseFloat(element.textContent) || 0;
		const duration = 600;
		const startTime = Date.now();

		function animate() {
			const currentTime = Date.now();
			const progress = Math.min((currentTime - startTime) / duration, 1);
			const currentValue = startValue + (targetValue - startValue) * progress;

			element.textContent = decimals > 0
				? currentValue.toFixed(decimals)
				: Math.round(currentValue);

			if (progress < 1) {
				requestAnimationFrame(animate);
			}
		}

		animate();
	}

	// 슬라이더 업데이트
	function updateSimulation() {
		let percent = slider.value;

		// 퍼센트 10씩 움직이게 하기
		percent = Math.round(percent / 10) * 10;
    	slider.value = percent;

    	// 퍼센트 표시
		sliderTooltip.textContent = percent + '%';
		sliderTooltip.style.left = percent + '%';

		// 슬라이더 배경색
		slider.style.background = `linear-gradient(to right, #43564A 0%, #43564A ${percent}%, #E5E5E5 ${percent}%, #E5E5E5 100%)`;

		// 계산
		const recycledAmount = TOTAL_AGGREGATE * (percent / 100);
		const carbonReduction = recycledAmount * CO2_REDUCTION_PER_TON;
		const costReduction = (recycledAmount * COST_REDUCTION_PER_TON) / 10000;

		// 카운트업 애니메이션
		countUp(carbonValue, carbonReduction, 1);
		countUp(costValue, costReduction, 0);
	}
	slider.addEventListener('input', updateSimulation);

	updateSimulation();
</script>


<!--한계 섹션-->
<section id="limitation" class="limitation-section" data-theme="light">
	<div class="section-header">
		<span class="section-label">LIMITATION</span>
		<h2 class="limitation-title">순환골재 사용량 증가의 한계</h2>

		<div class="limitation-texts">
			<p class="limitation-text1">* 2016년도 의무 사용량 확대(40%)로 인한 사용량 증가</p>
			<p class="limitation-text2">* 2019년도 ~ 사용량 정체</p>
		</div>
	</div>

	<div class="chart-container">
		<canvas id="limitationChart"></canvas>
	</div>

	<p class="chart-source">참고 : 한국환경공단_순환골재 폐기물 데이터</p>
</section>
<!--한계 섹션 JS -->
<script>
	const years = [2011, 2013, 2015, 2017, 2019, 2021, 2023, 2025];

	<!--2011~2019까지 실제 데이터, 2023~2025는 예측 데이터 사용-->
	const usageData = [39663247.87, 37505727.45, 36447265.56, 44784696.06,
            54073761.09, 52177874.85, 51000000,  50000000];

	const dataBefore = [39663247.87, 37505727.45, 36447265.56, 44784696.06,
            54073761.09, null, null, null];

	const dataAfter = [null, null, null, null, 54073761.09, 52177874.85, 51000000,  50000000];

	const limitationCtx = document.getElementById('limitationChart').getContext('2d');

	const limitationChartInstance = new Chart(limitationCtx, {
		type: 'line',
		data: {
			labels: years,
			datasets: [
				{
					label: '사용량(증가)',
					data: dataBefore,
					borderColor: '#000000',
					backgroundColor: 'transparent',
					borderWidth: 2,
					pointRadius: 3,
					pointBackgroundColor: '#fff',
					pointBorderColor: '#000',
					pointBorderWidth: 2,
					tension: 0.1 },
				{
					label: '사용량(정체)',
					data: dataAfter,
					borderColor: '#BE563D',
					borderWidth: 4,
					pointRadius: 3,
					pointBackgroundColor: '#fff',
					pointBorderColor: '#BE563D',
					pointBorderWidth: 2,
					tension: 0.1 }
				]
			},
			options: {
				responsive: true,
				maintainAspectRatio: false,
				plugins: {
					legend: {
						display: false
					},
					tooltip: {
						callbacks: {
							label: function(context) {
								return '사용량: ' + context.parsed.y.toLocaleString() + '톤';
							}
						}
					}
				},
				scales: {
					x: {
						grid: {
							color: '#E5E5E5'
						}
					},
					y: {
						min: 35000000,
                        max: 55000000,
                        ticks: {
                            stepSize: 5000000,
                            callback: function(value) {
                                return value.toLocaleString();
                            }
                        },
                        grid: {
                            color: '#E5E5E5'
                        }
                    }
                }
            }
        });
</script>

<!--한계 섹션 끝-->
<!--문제 섹션-->
<section id="why" class="why-section" data-theme="dark">
	<div class="why-header">
		<span class="section-label">WHY?</span>
		<h2 class="why-title">순환골재, 왜 확산되지 못하고 있을까?</h2>
		<p class="why-subtitle">품질 신뢰성 우려로 인한 순환골재 사용 기피</p>
	</div>

	<div class="legend">
		<div class="legend-item">
			<div class="legend-color1"></div>
				<span class="legend-text">전문가 그룹</span>
		</div>
		<div class="legend-item">
			<div class="legend-color2"></div>
			<span class="legend-text">종사자 그룹</span>
		</div>
	</div>

	<div class="chart-container">
		<canvas id="whyChart"></canvas>
	</div>

	<p class="chart-source">출처 : LH(한국토지주택공사) 토지주택연구원 ‘순환골재 활성화 정책 제안을 위한 현장 실태조사 및 전문가 설문’</p>
</section>

<!--문제 섹션 JS -->
<script>
	const whyCtx = document.getElementById('whyChart').getContext('2d');

	const whyChartInstance = new Chart(whyCtx, {
		type: 'bar',
		data: {
			labels: [
				'사용자 인지도\n문제',
				'콘크리트 품질\n신뢰성 우려',
				'발주처\n사용 제한'
			],
			datasets: [
				{
					label: '전문가 그룹',
					data: [17, 73, 8],
					backgroundColor: '#43564A',
					borderWidth: 0,
					barPercentage: 0.6,
					categoryPercentage: 0.7,
					borderRadius: 5,
					borderSkipped: 'bottom'
				},
				{
					label: '종사자 그룹',
					data: [44, 33, 22],
					backgroundColor: '#E1D8CF',
					borderWidth: 0,
					barPercentage: 0.6,
					categoryPercentage: 0.7,
					borderRadius: 5,
					borderSkipped: 'bottom'
					}
			]
		},

		options: {
			responsive: true,
			maintainAspectRatio: false,

		animation: false,
			plugins: {
				legend: {
					display: false
				},
				tooltip: {
					callbacks: {
						label: function(context) {
							return context.dataset.label + ': ' + context.parsed.y + '%';
						}
					}
				}
			},

			scales: {
				x: {
					grid: {
						display: false,
						drawBorder: true,
						borderColor: '#ffffff',
						borderWidth: 3

					},
					ticks: {
						color: '#ffffff',
						font: {
							size: 24,
							weight: '500'
						},
						maxRotation: 0,
						autoSkipPadding: 20,
						padding: 30
					}
				},

				y: {
					beginAtZero: true,
					max: 80,
					grid: {
						color: 'rgba(255, 255, 255, 0.1)',
						drawBorder: false
					},
					ticks: {
						display: false
					}
				}
			},

			layout: {
				padding: {
					top: 30,
					bottom: 20
				}
			}
		},

		plugins: [{
			afterDatasetsDraw: function(chart) {
				const ctx = chart.ctx;
				chart.data.datasets.forEach(function(dataset, i) {
					const meta = chart.getDatasetMeta(i);
					meta.data.forEach(function(bar, index) {
						const data = dataset.data[index];

						ctx.fillStyle = '#FFFFFF';
						ctx.font = 'bold 28px Pretendard';
						ctx.textAlign = 'center';
						ctx.textBaseline = 'bottom';

						const x = bar.x;
						const y = bar.y - 10;

						ctx.fillText(data + '%', x, y);
					});
				});
			}
		}]
	});
</script>
<!--문제 그래프 섹션 끝-->
<!--문제 그래프 JS-->
<script>
	let hasAnimated = false;

	const originalData = [
		[17, 73, 8],
		[44, 33, 22]
	];

	whyChartInstance.data.datasets[0].data = [0, 0, 0];
	whyChartInstance.data.datasets[1].data = [0, 0, 0];
	whyChartInstance.update('none');

	window.addEventListener('scroll', () => {
		const whySection = document.querySelector('.why-section');
		const rect = whySection.getBoundingClientRect();
		const windowHeight = window.innerHeight;

		if (rect.top <= windowHeight * 0.3 && rect.bottom >= 0 && !hasAnimated) {
		   whySection.classList.add('visible');
		   hasAnimated = true;

			// 첫 번째
			setTimeout(() => {
				whyChartInstance.data.datasets[0].data = [17, 0, 0];
				whyChartInstance.data.datasets[1].data = [44, 0, 0];
				whyChartInstance.options.animation = {
					duration: 500,
					easing: 'easeOutQuart'
				};
				whyChartInstance.update();
			}, 100);

			// 세 번째
			setTimeout(() => {
				whyChartInstance.data.datasets[0].data = [17, 0, 8];
				whyChartInstance.data.datasets[1].data = [44, 0, 22];
				whyChartInstance.options.animation = {
					duration: 500,
					easing: 'easeOutQuart'
			};
			whyChartInstance.update();
		}, 600);

			// 두 번째
			setTimeout(() => {
				whyChartInstance.data.datasets[0].data = [17, 73, 8];
				whyChartInstance.data.datasets[1].data = [44, 33, 22];
				whyChartInstance.options.animation = {
					duration: 500,
					easing: 'easeOutQuart'
			};
			whyChartInstance.update();
		}, 1100);
   }
});


</script>


<!--과정 섹션-->
<section id="procedure" class="procedure-section" data-theme="light">

	<div class="procedure-header">
		<span class="section-label">PROCEDURE</span>
		<h2 class="section-title">품질 신뢰 회복의 핵심, 분리 선별 과정</h2>
	</div>

	<div class="timeline-wrapper">

        <!--가로선 부분-->
        <div class="timeline-line"></div>

			<!--step-->
			<div class="timeline-steps">

                <!-- 시작점 -->
                <div class="timeline-step top start">
                    <div class="step-info">
                        <span class="step-text">순환 골재 처리 공정</span>
                    </div>
                    <div class="vertical-line"></div>
                    <div class="step-dot"></div>
                </div>

				<!--step1-->
                <div class="timeline-step top">
                        <div class="step-info">
                            <span class="step-number">STEP.1</span>
                            <span class="step-text">철거</span>
                        </div>

                        <div class="vertical-line"></div>
                    <div class="step-dot"></div>
                </div>

			<!--step2-->
            <div class="timeline-step bottom">
                <div class="step-dot"></div>
                    <div class="vertical-line"></div>
                    <div class="step-info">
                        <span class="step-number">STEP.2</span>
                        <span class="step-text">운반</span>
                    </div>
                </div>

				<!--step3-->
                <div class="timeline-step top">
                        <div class="step-info">
                            <span class="step-number">STEP.3</span>
                            <span class="step-text">파쇄</span>
                        </div>
                        <div class="vertical-line"></div>
                    <div class="step-dot"></div>
                </div>

			<!--step4-->
            <div class="timeline-step down highlight">
                <div class="step-dot"></div>
                    <div class="vertical-line"></div>
                    <div class="step-info">
                        <span class="step-number">STEP.4</span>
                        <span class="step-text">분리 선별</span>
                    </div>
                </div>

			<!--step5-->
            <div class="timeline-step top">
                    <div class="step-info">
                        <span class="step-number">STEP.5</span>
                        <span class="step-text">순환 골재 생산</span>
                    </div>
                    <div class="vertical-line"></div>
                <div class="step-dot"></div>
            </div>


                <!--타임라인 step6-->
                <div class="timeline-step bottom">
                    <div class="step-dot"></div>
                        <div class="vertical-line"></div>
                        <div class="step-info">
                            <span class="step-text">순환 골재 사용</span>
                        </div>
                    </div>
                </div>
            </div>
</section>

<!--과정 섹션 JS-->
<script>
	const timelineSection = document.querySelector('.procedure-section');
	const timelineLine = document.querySelector('.timeline-line');
	const timelineSteps = document.querySelectorAll('.timeline-step');

	const observer = new IntersectionObserver((entries) => {
		entries.forEach(entry => {

			if (entry.isIntersecting) {
                if (timelineLine) {
                    timelineLine.classList.add('animate');
                }

            timelineSteps.forEach((step, index) => {
                    setTimeout(() => {
                        const verticalLine = step.querySelector('.vertical-line');
                        if (verticalLine) {
                            verticalLine.classList.add('animate');
                        }

                        setTimeout(() => {
                            const dot = step.querySelector('.step-dot');
                            if (dot) {
                                dot.classList.add('animate');
                            }
                        }, 200);
                    }, 1500 + (index * 200));
                });

                observer.unobserve(entry.target);
            }
        });
    }, { threshold: 0.3 });

    if (timelineSection) {
        observer.observe(timelineSection);
    }
</script>
<!--과정 섹션 끝-->
<!--솔루션 섹션-->
<section id="solution" class="solution-section" data-theme="light">
	<div class="solution-header">
		<span class="solution-label">SOLUTION</span>
		<h2 class="solution-title">우리의 솔루션</h2>
	</div>

	<div class="solution-cards">
		<div class="solution-card">
            <img src="/images/solution card1.svg" alt="R-CNN 객체 검출" class="card-image">

			<div class="solution-card-content">
                <span class="solution-card-label">Deep Learning</span>
				<h3 class="solution-card-title">R-CNN 객체 검출</h3>

			<p class="card-description">
				순환 골재 이미지에서 <br>
                플라스틱, 비닐, 유리 등 <br>
				다양한 불순물을 <br>
                정밀하게 분리합니다.
			</p>

            <ul class="card-features">
                <li>
                    <img src="/images/solution.png" alt="icon">
                    <span>순환 골재 이미지에서 플라스틱, 비닐, 유리 등 <br>
                    다양한 불순물을 정밀하게 분리</span>
                </li>

                <li>
                    <img src="/images/solution.png" alt="icon">
                    <span>고정밀 객체 검출로 불순물 식별</span>

                </li>
                <li>
                    <img src="/images/solution.png" alt="icon">
                    <span>실시간 분석 시스템</span>
                </li>
            </ul>
		</div>
        </div>

		<div class="solution-card">
            <img src="/images/solution card2.svg" alt="OpenCV 분석" class="card-image">
			<div class="solution-card-content">
                <span class="solution-card-label">Computer Vision</span>
				<h3 class="solution-card-title">OpenCV 분석</h3>

			<p class="card-description">
				영상의 색상, 밝기, 경계 등 <br>
                기초적인 영상 처리 기법을 활용하여 <br>
                불순물 영역을 빠르게 검출합니다.
			</p>

            <ul class="card-features">
                <li>
                    <img src="/images/solution.png" alt="icon">
                    <span>영상의 색상, 밝기, 경계 등 <br>
                    기초적인 영상 처리 기법 활용</span>
                </li>
                <li>
                    <img src="/images/solution.png" alt="icon">
                    <span>빠른 불순물 영역 검출</span>
                </li>
                <li>
                    <img src="/images/solution.png" alt="icon">
                    <span>실시간 이미지 전처리 및 품질 향상</span>
                </li>
            </ul>
		</div>
        </div>

		<div class="solution-card">
            <img src="/images/solution card3.svg" alt="PCA 분석" class="card-image">
			<div class="solution-card-content">
                <span class="solution-card-label">Data Analysis</span>
				<h3 class="solution-card-title">PCA 분석</h3>

		<p class="card-description">
			이미지의 색상 및 질감 정보를 축소하여<br>
			핵심 특징을 추출합니다. <br>
			추출된 주성분을 기반으로 클러스터링을 <br>
            수행하여 불순물을 그룹화하고,<br>
			배경과 대비되는 영역을 <br>
            시각적으로 강조합니다.
		</p>
        <ul class="card-features">
            <li>
                <img src="/images/solution.png" alt="icon">
                <span>이미지의 색상 및 질감 정보를 축소하여 <br>
                핵심 특징을 추출</span>
            </li>
            <li>
                <img src="/images/solution.png" alt="icon">
                <span>클러스터링 기반 불순물 그룹화</span>
            </li>
            <li>
                <img src="/images/solution.png" alt="icon">
                <span>배경 대비 영역 시각적 강조</span>
            </li>
        </ul>
		</div>
	</div>
    </div>
		<div class="button-section">
			<button class="btn-analyze" onclick="location.href='/analyze'"> 품질 검사 </button>
		</div>
</section>
<!--솔루션 섹션 끝-->
<!--솔루션 섹션 JS-->
<script>
	window.addEventListener('scroll', () => {
		const cards = document.querySelectorAll('.solution-card');
		const windowHeight = window.innerHeight;

		cards.forEach((card, index) => {
			const rect = card.getBoundingClientRect();
			if (rect.top <= windowHeight * 0.8 && !card.classList.contains('visible')) {

				setTimeout(() => {
					card.classList.add('visible');
				}, index * 150);
			}
		});
	});
</script>
<!-- 헤더 테마 자동 변경 -->
<script>
    function updateTheme() {
        const header = document.querySelector('.header');
        const sections = document.querySelectorAll('section[data-theme]');
        const headerHeight = header ? header.offsetHeight : 0;

        sections.forEach(section => {
            const rect = section.getBoundingClientRect();

            if (rect.top <= headerHeight && rect.bottom >= headerHeight) {
                const theme = section.getAttribute('data-theme');

                if (theme === 'dark') {
                    document.body.className = 'dark-theme';
                } else {
                    document.body.className = 'light-theme';
                }
            }
        });

        if (header) {
            if (window.scrollY > 50) {
                header.classList.add('scrolled');
            } else {
                header.classList.remove('scrolled');
            }
        }
    }

    document.addEventListener('DOMContentLoaded', updateTheme);

    window.addEventListener('scroll', updateTheme);
</script>
{{> layout/footer}}
</body>
</html>



