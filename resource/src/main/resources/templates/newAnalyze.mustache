<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>분석 페이지</title>
    <link rel="stylesheet" href="/css/common.css">
    <link rel="stylesheet" href="/css/newAnalyze.css">


</head>
<body>
<input type="hidden" name="_csrf" value="{{_csrf.token}}">
{{>layout/header}}

<!-- 히어로 Section -->
<section class="hero-section" data-theme="light">
    <div class="hero-content">
        <p class="hero-subtitle">
			<span class="ping"></span>
			AI 기반 품질 분석 시스템</p>
        <h1 class="hero-title">
            순환 골재 품질 분석<br>
            <span>AI로 더 정확하게</span>
        </h1>

        <p class="hero-desc">
            R-CNN, PCA, OpenCV를 활용하여 순환골재 내 불순물을 검출하고,<br>
            품질 기준에 적합한지 여부를 판정합니다.
        </p>
    </div>

    <div class="hero-tech">
        <p class="tech-label">핵심 기술</p>
        <div class="tech-list">
            <div class="tech-item">
                <div class="tech-icon">R-</div>
                <p class="tech-name">R-CNN<br><span>객체 검출</span></p>
            </div>
            <div class="tech-item">
                <div class="tech-icon">PC</div>
                <p class="tech-name">PCA<br><span>차원 축소</span></p>
            </div>
            <div class="tech-item">
                <div class="tech-icon">Op</div>
                <p class="tech-name">OpenCV<br><span>이미지 처리</span></p>
            </div>
        </div>
    </div>

</section>


<!-- 분석 프로세스 섹션 -->
<section class="process-section">
    <h2 class="process-title">정확한 분석 프로세스</h2>
    <p class="process-subtitle">3단계 AI 분석으로 순환골재의 불순물을 정밀하게 선별합니다</p>

    <div class="process-container">
        <div class="process-card">
            <span class="process-step">1</span>
            <h3>이미지 전처리</h3>
            <p>이미지 품질 향상 및 노이즈 제거</p>
        </div>

        <div class="process-card">
            <span class="process-step">2</span>
            <h3>객체 검출</h3>
            <p>머신러닝 및 딥러닝 모델을 통한 불순물 검출</p>
        </div>

        <div class="process-card">
            <span class="process-step">3</span>
            <h3>불순물 분류</h3>
            <p>검출된 객체의 종류 및 분류</p>
        </div>
    </div>
</section>

<!-- 이미지 업로드 및 분석 섹션 -->
<section class="upload-section">
	<div class="upload1-header">
		<h2 class="upload1-title">실시간 분석 </h2>
		<p class="upload1-subtitle">이미지를 업로드하면 즉시 AI 분석이 시작됩니다</p>
	</div>

	<!--요구사항 카드-->
	<div class="requirements-card">
		<div class="requirements-header">
				<h3>이미지 업로드 요구사항</h3>
				<p>정확한 분석을 위해 다음 요구사항을 확인해주세요</p>
			</div>

            <!-- 품질 기준 및 규정 -->
            <div class="quality-standard">
                <p class="quality-standard-title">품질 기준 및 규정</p>
                <p class="quality-standard-desc">
                    순환 골재의 유기 이물질 함유량은 골재속에 포함된 비닐, 플라스틱, 목재 등의 함유량이
                    총 골재 용적의 1.0% 이하이어야 한다.<br>
                    기준: KS F2576(순환 골재의 이물질 함유량 시험방법)
                </p>
            </div>

		<div class="requirements-grid">
			<div class="req-column">
				<div class="req-title">
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#E07C3E" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="inline-block mr-1">
						<circle cx="12" cy="12" r="10"></circle>
						<line x1="12" x2="12" y1="8" y2="12"></line>
						<line x1="12" x2="12.01" y1="16" y2="16"></line>
					</svg>
					<strong>이미지 품질</strong>
				</div>
				<ul>
					<li>최소 해상도: 800x600px</li>
					<li>권장 해상도: 1920x1080px</li>
					<li>선명한 초점 필수</li>
					<li>적절한 조명 환경</li>
				</ul>
			</div>

			<div class="req-column">
				<div class="req-title">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#E07C3E" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="inline-block mr-1">
                        <circle cx="12" cy="12" r="10"></circle>
                        <line x1="12" x2="12" y1="8" y2="12"></line>
                        <line x1="12" x2="12.01" y1="16" y2="16"></line>
                    </svg>
					<strong>촬영 규칙</strong>
				</div>
				<ul>
					<li>근접 촬영 필수</li>
					<li>수직 또는 45도 각도</li>
					<li>그림자 최소화</li>
					<li>배경 단순화 권장</li>
				</ul>
			</div>

			<div class="req-column">
				<div class="req-title">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#E07C3E" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="inline-block mr-1">
                        <circle cx="12" cy="12" r="10"></circle>
                        <line x1="12" x2="12" y1="8" y2="12"></line>
                        <line x1="12" x2="12.01" y1="16" y2="16"></line>
                    </svg>
					<strong>파일 규격</strong>
				</div>
				<ul>
					<li>형식: JPG, PNG, WEBP</li>
					<li>최대 크기: 10MB</li>
					<li>색상: RGB 필수</li>
					<li>압축률: 85% 이상</li>
				</ul>
			</div>
		</div>
	</div>

	<!-- 이미지 업로드 박스 -->
	<div class="upload-analysis-grid">
	<div class="upload-card">
		<div class="card-header">
			<h3>이미지 업로드</h3>
		</div>
		<p class="card-subtitle">분석할 골재 이미지를 업로드해주세요</p>

		<div class="upload-area" onclick="document.getElementById('image-upload').click()">
			<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="#43564A" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="upload-icon-large">
				<path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
				<polyline points="17 8 12 3 7 8"></polyline>
				<line x1="12" x2="12" y1="3" y2="15"></line>
			</svg>
			<p class="upload-text">클릭하거나 이미지 업로드</p>
			<p class="upload-hint">또는 파일을 드래그 앤 드롭</p>
			<small class="upload-format">JPG, JPEG, PNG, WEBP (최대 10MB)</small>
		</div>

        <p id="cond-label" style="margin-top: 8px;"></p>

        <button class="start-analysis-btn" id="start-analysis-btn">분석 시작</button>

        <input type="file" id="file-input" accept="image/jpeg,image/jpg,image/png,image/webp" style="display:none">
        <button class="reselect-file-btn" style="display:none; margin-top: 8px;">다시 선택</button>
    </div>

    <!-- 미리보기 -->
    <div class="preview-container" id="preview-container" style="display: none;">
        <img id="preview-img" src="" alt="미리보기">
    </div>

	<!-- 분석 진행 상황 -->
	<div class="analysis-card">
		<div class="card-header">
			<h3>분석 진행 상황</h3>
		</div>
		<p class="card-subtitle">이미지를 업로드하고 분석을 시작해보세요</p>

		<div class="analysis-steps">
			<div class="step-item">
				<strong>이미지 규격 확인 중</strong>
				<p class="step-desc">업로드된 이미지의 품질 및 규격 확인 중입니다</p>

                <div class="progress-container">
                    <progress id="progress-bar1" max="100" value="0"></progress>
                    <span id="progress-check1" class="progress-check"></span>
                </div>
			</div>

			<div class="step-item">
				<strong>객체 및 불순물 분석 중</strong>
				<p class="step-desc">AI 모델이 이미지 내 객체를 분석하고 있습니다</p>
                <div class="progress-container">
                    <progress id="progress-bar2" max="100" value="0"></progress>
                    <span id="progress-check2" class="progress-check"></span>
                </div>
			</div>

			<div class="step-item">
				<strong>분석 결과 정리 및 리포트 생성 중</strong>
				<p class="step-desc">검출 비율과 분석 리포트를 정리하는 중입니다</p>
                <div class="progress-container">
                    <progress id="progress-bar3" max="100" value="0"></progress>
                    <span id="progress-check3" class="progress-check"></span>
                </div>

                 <!-- 분석 완료 메시지 -->
                <div class="analysis-complete-message" id="analyze-done" style="display: none;">
                    <p>분석이 완료되었습니다. 분석결과를 확인해주세요.</p>
                    <button class="view-result-btn" onclick="alert('분석 결과 페이지로 이동합니다.')">분석 결과</button>
                </div>
            </div>
        </div>
    </div>
	</div>
</section>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const fileInput = document.getElementById("file-input");
        const uploadArea = document.querySelector(".upload-area");
        const previewContainer = document.getElementById("preview-container");
        const previewImg = document.getElementById("preview-img");
        const startBtn = document.getElementById("start-analysis-btn");
        const condLabel = document.getElementById("cond-label");
        const analyzeDone = document.getElementById("analyze-done");
        const reselectBtn = document.querySelector(".reselect-file-btn");

        // 진행률 바 + 체크마크
        const progressBars = [
            { bar: document.getElementById('progress-1'), check: document.getElementById('check-1') },
            { bar: document.getElementById('progress-2'), check: document.getElementById('check-2') },
            { bar: document.getElementById('progress-3'), check: document.getElementById('check-3') }
        ];

        let selectedFile = null;
        let csrfToken = ""; // 필요 시 설정
        let origImageId = null;

        // 업로드 영역 클릭
        uploadArea.addEventListener("click", () => fileInput.click());

        // 드래그앤드롭
        uploadArea.addEventListener("dragover", (e) => e.preventDefault());
        uploadArea.addEventListener("drop", (e) => {
            e.preventDefault();
            if (e.dataTransfer.files.length) handleFile(e.dataTransfer.files[0]);
        });

        // 파일 선택
        fileInput.addEventListener("change", () => {
            if (fileInput.files.length) handleFile(fileInput.files[0]);
        });

        function handleFile(file) {
            selectedFile = file;
            const reader = new FileReader();
            reader.onload = () => {
                previewImg.src = reader.result;
                previewContainer.style.display = "block";
            };
            reader.readAsDataURL(file);

            checkFileConditions(file);
            reselectBtn.style.display = "inline-block";
        }

        function checkFileConditions(file) {
            let message = "";
            const allowedTypes = ["image/jpeg", "image/jpg", "image/png", "image/webp"];
            if (!allowedTypes.includes(file.type)) {
                message = "지원하지 않는 파일 형식입니다.";
            } else if (file.size > 10 * 1024 * 1024) {
                message = "파일 크기가 10MB를 초과했습니다.";
            } else {
                message = "파일 업로드 준비 완료!";
            }
            condLabel.textContent = message;
        }

        reselectBtn.addEventListener("click", () => {
            fileInput.value = "";
            selectedFile = null;
            previewContainer.style.display = "none";
            condLabel.textContent = "";
            analyzeDone.style.display = "none";
            reselectBtn.style.display = "none";

            // 진행률 초기화
            progressBars.forEach(p => {
                p.bar.style.width = "0%";
                if (p.check) {
                    p.check.classList.remove('animate', 'fill');
                }
            });
        });

        // 분석 시작
        startBtn.addEventListener("click", async () => {
            if (!selectedFile) {
                alert("분석할 파일을 먼저 업로드해주세요.");
                return;
            }

            // 진행률 초기화
            progressBars.forEach(p => {
                p.bar.style.width = "0%";
                if (p.check) p.check.classList.remove('animate', 'fill');
            });
            analyzeDone.style.display = "none";

            try {
                // 1️⃣ 이미지 규격 검사
                await performStep1Validation(selectedFile);

                // 2️⃣ 딥러닝 분석
                await performStep2Analysis(selectedFile);

                // 3️⃣ 결과 정리
                await performStep3Finalize();

                analyzeDone.style.display = "block";
                condLabel.textContent = "분석 완료!";
                condLabel.style.color = "green";

            } catch (err) {
                console.error("분석 실패:", err);
                alert("분석 실패: " + err.message);
                condLabel.textContent = "분석 중 오류가 발생했습니다. 다시 시도해주세요.";
                condLabel.style.color = "red";
            }
        });

        // --- 단계별 함수 ---
        async function performStep1Validation(file) {
            const { bar, check } = progressBars[0];
            bar.style.width = "0%";

            try {
                // 실제 fetch 호출
                const formData = new FormData();
                formData.append('image', file);
                const res = await fetch('/api/images/validate', {
                    method: 'POST',
                    headers: { 'X-CSRF-TOKEN': csrfToken },
                    body: formData
                });
                const data = await res.json();

                if (data.status !== 0) throw new Error(data.error || '이미지 규격 검사 실패');

                await fillProgressBar(bar, 500);
                animateCheck(check);

            } catch (err) {
                throw err;
            }
        }

        async function performStep2Analysis(file) {
            const { bar, check } = progressBars[1];
            bar.style.width = "0%";

            try {
                const formData = new FormData();
                formData.append('image', file);
                const res = await fetch('/api/images/upload', {
                    method: 'POST',
                    headers: { 'X-CSRF-TOKEN': csrfToken },
                    body: formData
                });
                const data = await res.json();

                if (!data.id) throw new Error('딥러닝 분석 실패 (ID 없음)');
                origImageId = data.id;

                await fillProgressBar(bar, 600);
                animateCheck(check);

            } catch (err) {
                throw err;
            }
        }

        async function performStep3Finalize() {
            const { bar, check } = progressBars[2];
            bar.style.width = "0%";

            await fillProgressBar(bar, 600);
            animateCheck(check);
        }

        // --- 유틸리티 ---
        function sleep(ms) { return new Promise(res => setTimeout(res, ms)); }

        async function fillProgressBar(bar, duration) {
            const steps = 30;
            const delay = duration / steps;
            for (let i = 0; i < steps; i++) {
                const width = Math.min(((i + 1) / steps) * 100, 100);
                bar.style.width = width + "%";
                await sleep(delay);
            }
            bar.style.width = "100%";
        }

        function animateCheck(check) {
            if (!check) return;
            check.classList.add('animate');
            setTimeout(() => check.classList.add('fill'), 500);
        }

    });
</script>

{{>layout/footer}}
</body>
</html>
